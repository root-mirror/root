diff --git a/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Converters.cxx b/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Converters.cxx
index 3c8fdd15..d345e19 100644
--- a/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Converters.cxx
+++ b/bindings/pyroot_experimental/cppyy/CPyCppyy/src/Converters.cxx
@@ -1188,6 +1188,7 @@ bool CPyCppyy::name##Converter::ToMemory(PyObject* value, void* address)     \
     return InstancePtrConverter::ToMemory(value, address);                   \
 }
 
+CPPYY_IMPL_STRING_AS_PRIMITIVE_CONVERTER(TString, TString, Data, Length)
 CPPYY_IMPL_STRING_AS_PRIMITIVE_CONVERTER(STLString, std::string, c_str, size)
 CPPYY_IMPL_STRING_AS_PRIMITIVE_CONVERTER(STLStringViewBase, std::string_view, data, size)
 bool CPyCppyy::STLStringViewConverter::SetArg(
@@ -2404,6 +2405,9 @@ public:
         gf["const ULong64_t&"] =            gf["const unsigned long long&"];
 
     // factories for special cases
+        gf["TString"] =                     (cf_t)+[](long) { return new TStringConverter{}; };
+        gf["TString&"] =                    (cf_t)+[](long) { return new TStringConverter{}; };
+        gf["const TString&"] =              (cf_t)+[](long) { return new TStringConverter{}; };
         gf["nullptr_t"] =                   (cf_t)+[](dims_t) { return new NullptrConverter{}; };
         gf["const char*"] =                 (cf_t)+[](dims_t) { return new CStringConverter{}; };
         gf["const char[]"] =                (cf_t)+[](dims_t) { return new CStringConverter{}; };
diff --git a/bindings/pyroot_experimental/cppyy/CPyCppyy/src/DeclareConverters.h b/bindings/pyroot_experimental/cppyy/CPyCppyy/src/DeclareConverters.h
index e32a00a..c8eaa39 100644
--- a/bindings/pyroot_experimental/cppyy/CPyCppyy/src/DeclareConverters.h
+++ b/bindings/pyroot_experimental/cppyy/CPyCppyy/src/DeclareConverters.h
@@ -7,7 +7,10 @@
 // Standard
 #include <complex>
 #include <string>
+
+// ROOT
 #include "ROOT/RStringView.hxx"
+#include "TString.h"
 
 namespace CPyCppyy {
 
@@ -283,6 +286,7 @@ protected:                                                                   \
     strtype fBuffer;                                                         \
 }
 
+CPPYY_DECLARE_STRING_CONVERTER(TString, TString);
 CPPYY_DECLARE_STRING_CONVERTER(STLString, std::string);
 CPPYY_DECLARE_STRING_CONVERTER(STLStringViewBase, std::string_view);
 class STLStringViewConverter : public STLStringViewBaseConverter {
