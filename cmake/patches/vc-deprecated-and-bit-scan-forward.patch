commit d19a82411eb2f478671f20f4a3ed80d4820cf672
Author: Guilherme Amadio <amadio@cern.ch>
Date:   Fri Mar 6 10:46:02 2020 +0100

    Avoid redefinition of _bit_scan_{forward,reverse} macros
    
    Fixes #247.

diff --git a/Vc/common/bitscanintrinsics.h b/Vc/common/bitscanintrinsics.h
index 62543563..ce419e34 100644
--- a/Vc/common/bitscanintrinsics.h
+++ b/Vc/common/bitscanintrinsics.h
@@ -29,11 +29,8 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define VC_COMMON_BITSCANINTRINSICS_H_
 
 #if defined(Vc_GCC) || defined(Vc_CLANG) || defined(Vc_APPLECLANG)
-#  if Vc_GCC >= 0x40500
-     // GCC 4.5.0 introduced _bit_scan_forward / _bit_scan_reverse
-#    include <x86intrin.h>
-#  else
-     // GCC <= 4.4 and clang have x86intrin.h, but not the required functions
+#include <x86intrin.h>
+#  ifndef _bit_scan_forward
 #    define _bit_scan_forward(x) __builtin_ctz(x)
 #include "macros.h"
 static Vc_ALWAYS_INLINE Vc_CONST int _Vc_bit_scan_reverse_asm(unsigned int x) {

commit 8b4396e7a2b1b90009e7290d21fc92eb9ab7cb6e
Author: Sergey Linev <S.Linev@gsi.de>
Date:   Tue Jun 9 11:54:14 2020 +0200

    remove deprecated method which causing warnings

diff --git a/Vc/scalar/vector.h b/Vc/scalar/vector.h
index ede028c0..e7fa7fa8 100644
--- a/Vc/scalar/vector.h
+++ b/Vc/scalar/vector.h
@@ -210,13 +210,13 @@ template <typename T> class Vector<T, VectorAbi::Scalar>
         {
             return V2(static_cast<typename V2::EntryType>(m_data));
         }
-        template <typename V2>
-        Vc_DEPRECATED("use reinterpret_components_cast instead") Vc_ALWAYS_INLINE V2
-            reinterpretCast() const
-        {
-            typedef typename V2::EntryType AliasT2 Vc_MAY_ALIAS;
-            return V2(*reinterpret_cast<const AliasT2 *>(&m_data));
-        }
+//        template <typename V2>
+//        Vc_DEPRECATED("use reinterpret_components_cast instead") Vc_ALWAYS_INLINE V2
+//            reinterpretCast() const
+//        {
+//            typedef typename V2::EntryType AliasT2 Vc_MAY_ALIAS;
+//            return V2(*reinterpret_cast<const AliasT2 *>(&m_data));
+//        }
 
         Vc_ALWAYS_INLINE Common::WriteMaskedVector<Vector, Mask> operator()(Mask m)
         {
